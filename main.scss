@import "variables.scss";

html {
    scroll-behavior: smooth;
}

body {
    margin: 0;
    padding: 0;
    background-color: $color-light;
    display: flex;
    flex-direction: column;
}

main {
    width: 100%;
    padding: 0;
    margin: 0;
}

.container.centered, .button.centered, .image.centered {
    align-self: center;
}

.container.left, .button.left, .image.left {
    align-self: left;
}

.container.right, .button.right, .image.right {
    align-self: right;
}

.text.centered, .heading.centered {
    text-align: center;
}

.text.left, .heading.left {
    text-align: left;
}

.text.right, .heading.right {
    text-align: right;
}

.vertically.centered {
    height: 100%;
    justify-content: center;
}

.justified {
    text-align: justify;
}

.text {
    font-size: $font-size-tiny;
    font-family: $font-family;
    color: $color-text;
}

.heading {
    font-family: $font-family;
    color: $color-heading;
    font-size: $font-size-small;
    margin: $margin-heading-small;
}

.large.heading {
    font-size: $font-size-medium;
    margin: $margin-heading;
}

.button {
  font-size: $font-size-tiny;
  font-family: $font-family;
  padding: $padding-button;
  color: $color-medium;
  border: $border-button;
  -moz-transition: padding .3s ease-in;
  -o-transition: padding  .3s ease-in;
  -webkit-transition: padding  .3s ease-in;
  transition: padding  .3s ease-in;
}

@media only screen and (min-width: map-get($grid-breakpoints, "sm")) {
    .heading {
        font-size: $font-size-medium;
        margin: $margin-heading;
    }
    
    .large.heading {
        font-size: $font-size-large;
        margin: $margin-heading-large;
    }
    
    .button {
        font-size: $font-size-small;
    }
}

@media only screen and (min-width: map-get($grid-breakpoints, "md")) {
    .text {
        font-size: $font-size-small;
        font-family: $font-family;
        color: $color-text;
    }
}

.small.heading {
    font-size: $font-size-small;
    margin: $margin-heading-small;
}

.container {
    padding: $padding-container;
    display: inline-flex;
    flex-direction: column;
}

@media only screen and (min-width: map-get($grid-breakpoints, $row-break)) {
    .row.container {
        flex-direction: row;
    }
}

@media only screen and (min-width: map-get($grid-breakpoints, $squishable-row-break)) {
    .squishable.row.container {
        flex-direction: row;
    }
}

@media only screen and (min-width: map-get($grid-breakpoints, $adaptable-column-break)) {
    .adaptable.row.container {
        flex-direction: column;
    }
}

.button:hover {
  padding: $padding-button-hover;
  color: $color-dark;
  border: $border-button-hover;
}

.padded {
    padding: $padding-large;
}

.very.padded {
    padding: $padding-huge;
}

.evenly.padded {
    padding: $padding-even-large;
}

.very.evenly.padded {
    padding: $padding-even-huge;
}

.side.by.side {
    display: inline;
}

.small.image {
    width: $width-image-small;
    max-width: $width-image-full;
}

.medium.image {
    width: $width-image-medium;
    max-width: $width-image-full;
}

.large.image {
    width: $width-image-large;
    max-width: $width-image-full;
}

.full.image {
    width: $width-image-full;
}

#home-container {
    background-image: $background-image-home-container;
    background-position: center;
    background-size: cover;
}

.background {
    background-color: $background-color;
}

.faded.background {
    background-color: $background-color-faded;
}

a {
  text-decoration: none;
}

.container {                            width: calc(#{$width-xs-container}  - #{$padding-side-container} * 2);    }
.padded.container {                     width: calc(#{$width-xs-container}  - #{$padding-side-large} * 2);        }
.very.padded.container {                width: calc(#{$width-xs-container}  - #{$padding-side-huge} * 2);         }
.two.thirds.container {                 width: calc(#{$width-xs-two-thirds} - #{$padding-side-container} * 2);   }
.padded.two.thirds.container {          width: calc(#{$width-xs-two-thirds} - #{$padding-side-large} * 2);       }
.very.padded.two.thirds.container {     width: calc(#{$width-xs-two-thirds} - #{$padding-side-huge} * 2);        }
.half.container {                       width: calc(#{$width-xs-half}       - #{$padding-side-container} * 2);         }
.padded.half.container {                width: calc(#{$width-xs-half}       - #{$padding-side-large} * 2);             }
.very.half.padded.container {           width: calc(#{$width-xs-half}       - #{$padding-side-huge} * 2);              }
.third.container {                      width: calc(#{$width-xs-third}      - #{$padding-side-container} * 2);        }
.padded.third.container {               width: calc(#{$width-xs-third}      - #{$padding-side-large} * 2);            }
.very.third.padded.container {          width: calc(#{$width-xs-third}      - #{$padding-side-huge} * 2);             }

@media only screen and (min-width: map-get($grid-breakpoints, "sm")) {
    .container {                            width: calc(#{$width-sm-container}  - #{$padding-side-container} * 2);    }
    .padded.container {                     width: calc(#{$width-sm-container}  - #{$padding-side-large} * 2);        }
    .very.padded.container {                width: calc(#{$width-sm-container}  - #{$padding-side-huge} * 2);         }
    .two.thirds.container {                 width: calc(#{$width-sm-two-thirds} - #{$padding-side-container} * 2);   }
    .padded.two.thirds.container {          width: calc(#{$width-sm-two-thirds} - #{$padding-side-large} * 2);       }
    .very.padded.two.thirds.container {     width: calc(#{$width-sm-two-thirds} - #{$padding-side-huge} * 2);        }
    .half.container {                       width: calc(#{$width-sm-half}       - #{$padding-side-container} * 2);         }
    .padded.half.container {                width: calc(#{$width-sm-half}       - #{$padding-side-large} * 2);             }
    .very.half.padded.container {           width: calc(#{$width-sm-half}       - #{$padding-side-huge} * 2);              }
    .third.container {                      width: calc(#{$width-sm-third}      - #{$padding-side-container} * 2);        }
    .padded.third.container {               width: calc(#{$width-sm-third}      - #{$padding-side-large} * 2);            }
    .very.third.padded.container {          width: calc(#{$width-sm-third}      - #{$padding-side-huge} * 2);             }

    .squishable .container {                            width: calc(#{$width-lg-container}  - #{$padding-side-container} * 2);    }
    .squishable .padded.container {                     width: calc(#{$width-lg-container}  - #{$padding-side-large} * 2);        }
    .squishable .very.padded.container {                width: calc(#{$width-lg-container}  - #{$padding-side-huge} * 2);         }
    .squishable .two.thirds.container {                 width: calc(#{$width-lg-two-thirds} - #{$padding-side-container} * 2);   }
    .squishable .padded.two.thirds.container {          width: calc(#{$width-lg-two-thirds} - #{$padding-side-large} * 2);       }
    .squishable .very.padded.two.thirds.container {     width: calc(#{$width-lg-two-thirds} - #{$padding-side-huge} * 2);        }
    .squishable .half.container {                       width: calc(#{$width-lg-half}       - #{$padding-side-container} * 2);         }
    .squishable .padded.half.container {                width: calc(#{$width-lg-half}       - #{$padding-side-large} * 2);             }
    .squishable .very.half.padded.container {           width: calc(#{$width-lg-half}       - #{$padding-side-huge} * 2);              }
    .squishable .third.container {                      width: calc(#{$width-lg-third}      - #{$padding-side-container} * 2);        }
    .squishable .padded.third.container {               width: calc(#{$width-lg-third}      - #{$padding-side-large} * 2);            }
    .squishable .very.third.padded.container {          width: calc(#{$width-lg-third}      - #{$padding-side-huge} * 2);             }
}

@media only screen and (min-width: map-get($grid-breakpoints, "md")) {
    .container {                            width: calc(#{$width-md-container}  - #{$padding-side-container} * 2);    }
    .padded.container {                     width: calc(#{$width-md-container}  - #{$padding-side-large} * 2);        }
    .very.padded.container {                width: calc(#{$width-md-container}  - #{$padding-side-huge} * 2);         }
    .two.thirds.container {                 width: calc(#{$width-md-two-thirds} - #{$padding-side-container} * 2);   }
    .padded.two.thirds.container {          width: calc(#{$width-md-two-thirds} - #{$padding-side-large} * 2);       }
    .very.padded.two.thirds.container {     width: calc(#{$width-md-two-thirds} - #{$padding-side-huge} * 2);        }
    .half.container {                       width: calc(#{$width-md-half}       - #{$padding-side-container} * 2);         }
    .padded.half.container {                width: calc(#{$width-md-half}       - #{$padding-side-large} * 2);             }
    .very.half.padded.container {           width: calc(#{$width-md-half}       - #{$padding-side-huge} * 2);              }
    .third.container {                      width: calc(#{$width-md-third}      - #{$padding-side-container} * 2);        }
    .padded.third.container {               width: calc(#{$width-md-third}      - #{$padding-side-large} * 2);            }
    .very.third.padded.container {          width: calc(#{$width-md-third}      - #{$padding-side-huge} * 2);             }

    .squishable .container {                            width: calc(#{$width-xl-container}  - #{$padding-side-container} * 2);    }
    .squishable .padded.container {                     width: calc(#{$width-xl-container}  - #{$padding-side-large} * 2);        }
    .squishable .very.padded.container {                width: calc(#{$width-xl-container}  - #{$padding-side-huge} * 2);         }
    .squishable .two.thirds.container {                 width: calc(#{$width-xl-two-thirds} - #{$padding-side-container} * 2);   }
    .squishable .padded.two.thirds.container {          width: calc(#{$width-xl-two-thirds} - #{$padding-side-large} * 2);       }
    .squishable .very.padded.two.thirds.container {     width: calc(#{$width-xl-two-thirds} - #{$padding-side-huge} * 2);        }
    .squishable .half.container {                       width: calc(#{$width-xl-half}       - #{$padding-side-container} * 2);         }
    .squishable .padded.half.container {                width: calc(#{$width-xl-half}       - #{$padding-side-large} * 2);             }
    .squishable .very.half.padded.container {           width: calc(#{$width-xl-half}       - #{$padding-side-huge} * 2);              }
    .squishable .third.container {                      width: calc(#{$width-xl-third}      - #{$padding-side-container} * 2);        }
    .squishable .padded.third.container {               width: calc(#{$width-xl-third}      - #{$padding-side-large} * 2);            }
    .squishable .very.third.padded.container {          width: calc(#{$width-xl-third}      - #{$padding-side-huge} * 2);             }
}

@media only screen and (min-width: map-get($grid-breakpoints, "lg")) {
    .container {                            width: calc(#{$width-lg-container}  - #{$padding-side-container} * 2);    }
    .padded.container {                     width: calc(#{$width-lg-container}  - #{$padding-side-large} * 2);        }
    .very.padded.container {                width: calc(#{$width-lg-container}  - #{$padding-side-huge} * 2);         }
    .two.thirds.container {                 width: calc(#{$width-lg-two-thirds} - #{$padding-side-container} * 2);   }
    .padded.two.thirds.container {          width: calc(#{$width-lg-two-thirds} - #{$padding-side-large} * 2);       }
    .very.padded.two.thirds.container {     width: calc(#{$width-lg-two-thirds} - #{$padding-side-huge} * 2);        }
    .half.container {                       width: calc(#{$width-lg-half}       - #{$padding-side-container} * 2);         }
    .padded.half.container {                width: calc(#{$width-lg-half}       - #{$padding-side-large} * 2);             }
    .very.half.padded.container {           width: calc(#{$width-lg-half}       - #{$padding-side-huge} * 2);              }
    .third.container {                      width: calc(#{$width-lg-third}      - #{$padding-side-container} * 2);        }
    .padded.third.container {               width: calc(#{$width-lg-third}      - #{$padding-side-large} * 2);            }
    .very.third.padded.container {          width: calc(#{$width-lg-third}      - #{$padding-side-huge} * 2);        }

    .adaptable .container {                            width: calc(#{$width-sm-container}  - #{$padding-side-container} * 2);    }
    .adaptable .padded.container {                     width: calc(#{$width-sm-container}  - #{$padding-side-large} * 2);        }
    .adaptable .very.padded.container {                width: calc(#{$width-sm-container}  - #{$padding-side-huge} * 2);         }
    .adaptable .two.thirds.container {                 width: calc(#{$width-sm-two-thirds} - #{$padding-side-container} * 2);   }
    .adaptable .padded.two.thirds.container {          width: calc(#{$width-sm-two-thirds} - #{$padding-side-large} * 2);       }
    .adaptable .very.padded.two.thirds.container {     width: calc(#{$width-sm-two-thirds} - #{$padding-side-huge} * 2);        }
    .adaptable .half.container {                       width: calc(#{$width-sm-half}       - #{$padding-side-container} * 2);         }
    .adaptable .padded.half.container {                width: calc(#{$width-sm-half}       - #{$padding-side-large} * 2);             }
    .adaptable .very.half.padded.container {           width: calc(#{$width-sm-half}       - #{$padding-side-huge} * 2);              }
    .adaptable .third.container {                      width: calc(#{$width-sm-third}      - #{$padding-side-container} * 2);        }
    .adaptable .padded.third.container {               width: calc(#{$width-sm-third}      - #{$padding-side-large} * 2);            }
    .adaptable .very.third.padded.container {          width: calc(#{$width-sm-third}      - #{$padding-side-huge} * 2);             }
}

@media only screen and (min-width: map-get($grid-breakpoints, "xl")) {
    .container {                            width: calc(#{$width-xl-container}  - #{$padding-side-container} * 2);    }
    .padded.container {                     width: calc(#{$width-xl-container}  - #{$padding-side-large} * 2);        }
    .very.padded.container {                width: calc(#{$width-xl-container}  - #{$padding-side-huge} * 2);         }
    .two.thirds.container {                 width: calc(#{$width-xl-two-thirds} - #{$padding-side-container} * 2);   }
    .padded.two.thirds.container {          width: calc(#{$width-xl-two-thirds} - #{$padding-side-large} * 2);       }
    .very.padded.two.thirds.container {     width: calc(#{$width-xl-two-thirds} - #{$padding-side-huge} * 2);        }
    .half.container {                       width: calc(#{$width-xl-half}       - #{$padding-side-container} * 2);         }
    .padded.half.container {                width: calc(#{$width-xl-half}       - #{$padding-side-large} * 2);             }
    .very.half.padded.container {           width: calc(#{$width-xl-half}       - #{$padding-side-huge} * 2);              }
    .third.container {                      width: calc(#{$width-xl-third}      - #{$padding-side-container} * 2);        }
    .padded.third.container {               width: calc(#{$width-xl-third}      - #{$padding-side-large} * 2);            }
    .very.third.padded.container {          width: calc(#{$width-xl-third}      - #{$padding-side-huge} * 2);             }
}